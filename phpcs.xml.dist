<?xml version="1.0"?>
<ruleset
    name="PHPCS Rules"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="vendor/squizlabs/php_codesniffer/phpcs.xsd"
>

    <arg name="basepath" value="."/>
    <arg name="extensions" value="php"/>
    <arg name="parallel" value="80"/>
    <arg name="cache" value=".phpcs-cache"/>
    <arg name="colors"/>

    <!-- Ignore warnings, show progress of the run and show sniff names -->
    <arg value="nps"/>

    <file>.</file>
    <exclude-pattern>vendor/*</exclude-pattern>

    <rule ref="PSR2">
        <exclude name="Generic.Files.LineLength"/>
    </rule>

    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- Forbid duplicate classes -->
    <rule ref="Generic.Classes.DuplicateClassName"/>

    <!-- Forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
    </rule>

    <!-- Forbid final methods in final classes -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

    <!-- Forbid inline HTML in PHP code -->
    <rule ref="Generic.Files.InlineHTML"/>

    <!-- Force whitespace after a type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>

    <!-- Forbid PHP 4 constructors -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>

    <!-- Require constants to be UPPER_CASE -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- Forbid backtick operator -->
    <rule ref="Generic.PHP.BacktickOperator"/>

    <!-- Forbid any content before opening tag -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>

    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Forbid short open tag -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>

    <!-- Forbid alias functions, i.e. `sizeof()`, `delete()` -->
    <rule ref="Generic.PHP.ForbiddenFunctions"/>

    <!-- Forbid `php_sapi_name()` function -->
    <rule ref="Generic.PHP.SAPIUsage"/>

    <!-- Forbid useless inline string concatenation -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <!-- But multiline is useful for readability -->
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <!-- Forbid comments starting with # -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Disallow else if in favour elseif -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
        <type>error</type>
    </rule>

    <!-- Disallow creating an array by just appending an element to an undefined variable -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>

    <!-- Require comma after last element in multi-line array -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- Require presence of constant visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" type="boolean" value="true"/>
        </properties>
    </rule>

    <!-- Disallow overriding constants in classes -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants"/>

    <!-- Require using ::class instead of __CLASS__, get_class($this) and get_parent_class() -->
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>

    <!-- Require a separate use statement for each used trait -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>

    <!-- Require consistent spacing for trait use blocks -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="0"/>
        </properties>
    </rule>

    <!-- Forbid dead code -->
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements">
        <exclude name="SlevomatCodingStandard.Classes.UnusedPrivateElements.WriteOnlyProperty"/>
        <exclude name="SlevomatCodingStandard.Classes.UnusedPrivateElements.UnusedMethod"/>
    </rule>

    <!-- Forbid dead code -->
    <rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding"/>

    <!-- Forbid single-line doc comments -->
    <rule ref="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment"/>

    <!-- Require consistent spacing and grouping in docblocks -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBeforeFirstContent" value="0"/>
            <property name="linesCountAfterLastContent" value="0"/>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="1"/>
            <property name="linesCountBetweenAnnotationsGroups" value="1"/>
            <property name="annotationsGroups" type="array">
                <element value="
                    @internal,
                    @deprecated,
                "/>
                <element value="
                    @Security,
                "/>
                <element value="
                    @Get,
                    @Post,
                    @Patch,
                    @Put,
                    @Delete,
                "/>
                <element value="
                    @RequestParam,
                    @QueryParam,
                    @ParamConverter,
                "/>
                <element value="
                    @View,
                    @Template,
                    @Serializer\,
                "/>
                <element value="
                    @ORM\,
                    @ODM\,
                    @AppODM\,
                "/>
                <element value="@SWG\"/>
                <element value="@Algolia\"/>
                <element value="
                    @Annotation,
                    @Target,
                "/>
                <element value="
                    @GroupSequence,
                    @GroupSequenceProvider,
                    @NotNull,
                    @NotBlank,
                    @Type,
                    @Valid,
                    @Unique,
                    @All,
                    @Bic,
                    @Blank,
                    @Callback,
                    @Card,
                    @Choice,
                    @Collection,
                    @Composite,
                    @ContentEditable,
                    @Count,
                    @CountItems,
                    @Country,
                    @Currency,
                    @Date,
                    @DateTime,
                    @Email,
                    @EqualTo,
                    @Existence,
                    @Expression,
                    @File,
                    @GreaterThan,
                    @GreaterThanOrEqual,
                    @Iban,
                    @IdenticalTo,
                    @Image,
                    @Ip,
                    @Isbn,
                    @IsFalse,
                    @IsNull,
                    @Issn,
                    @IsTrue,
                    @Language,
                    @Length,
                    @LessThan,
                    @LessThanOrEqual,
                    @Link,
                    @Locale,
                    @Luhn,
                    @NotBlacklistedEmail,
                    @NotBlacklistedUsername,
                    @NotEqualTo,
                    @NotIdenticalTo,
                    @Optional,
                    @Path,
                    @PersonalStylistAboutText,
                    @ProductTagCount,
                    @Range,
                    @Regex,
                    @Required,
                    @Sluggable,
                    @Tag,
                    @Time,
                    @Traverse,
                    @Url,
                    @UserAboutText,
                    @Username,
                    @Uuid,
                    @VatId,
                    @VimeoVideo,
                "/>
                <element value="
                    @group,
                    @test,
                    @depends,
                    @dataProvider,
                    @testWith,
                    @expectedException,
                    @expectedExceptionMessage,
                    @expectedExceptionMessageRegexp,
                    @before,
                    @after,
                    @beforeClass,
                    @afterClass,
                "/>
                <element value="@method"/>
                <element value="@var"/>
                <element value="@param"/>
                <element value="@return"/>
                <element value="@throws"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid empty comments -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>

    <!-- Forbid useless annotations - Git and LICENCE file provide more accurate information -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property
                    name="forbiddenAnnotations"
                    type="array"
                    value="
                    @author,
                    @const,
                    @copyright,
                    @created,
                    @license,
                    @package,
                    @since,
                    @version
                "
            />
        </properties>
    </rule>

    <!-- report invalid format of inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>

    <!-- Don't allow docblocks containing only @inheritdoc -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>

    <!-- Require consistent spacing for control structures -->
    <rule ref="SlevomatCodingStandard.ControlStructures.ControlStructureSpacing"/>

    <!-- Disallow continue without operand in switch (throws warning in PHP 7.3) -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>

     <!--Forbid weak comparisons -->
    <!--<rule ref="SlevomatCodingStandard.ControlStructures.DisallowEqualOperators"/>-->

    <!-- Forbid fancy yoda conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>

    <!-- Require language constructs without parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>

    <!-- Require using parentheses for new -->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>

    <!-- Require usage of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>

    <!-- Require usage of short ternary operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>

    <!-- Require multi-lining ternary operators when they exceed a certain length -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator">
        <properties>
            <property name="lineLengthLimit" value="120"/>
        </properties>
    </rule>

    <!-- Require usage of ternary operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator"/>

    <!-- Forbid using return in useless if conditions -->
    <!--<rule ref="SlevomatCodingStandard.ControlStructures.UselessConditionWithReturn"/>-->

    <!-- Forbid useless unreachable catch blocks -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>

    <!-- Require using Throwable instead of Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>

    <!-- Require static closures when not using $this -->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>

    <!-- Report unused variables passed to closures -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>

    <!-- Report useless default values for functions/methods -->
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>

    <!-- Require use statements to be alphabetically sorted -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>

    <!-- Forbid fancy group uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>

    <!-- Forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>

    <!-- Require single space after namespace keyword, forbid content between namespace and semicolon -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>

    <!-- Enforce a single line before/after the namespace statement -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing"/>

    <!-- Forbid using absolute class name references (except global ones) -->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFallbackGlobalConstants" type="boolean" value="false"/>
            <property name="allowFallbackGlobalFunctions" type="boolean" value="false"/>
            <property name="allowFullyQualifiedGlobalClasses" type="boolean" value="false"/>
            <property name="allowFullyQualifiedGlobalConstants" type="boolean" value="false"/>
            <property name="allowFullyQualifiedGlobalFunctions" type="boolean" value="false"/>
            <property name="allowFullyQualifiedNameForCollidingClasses" type="boolean" value="false"/>
            <property name="allowFullyQualifiedNameForCollidingConstants" type="boolean" value="false"/>
            <property name="allowFullyQualifiedNameForCollidingFunctions" type="boolean" value="false"/>
            <property name="searchAnnotations" type="boolean" value="true"/>
        </properties>
    </rule>

    <!-- Only allow a single namespace in files -->
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>

    <!-- Forbid unused use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" type="boolean" value="true"/>
        </properties>
    </rule>

    <!-- Forbid superfluous leading backslash in use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>

    <!-- Forbid useless uses of the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>

    <!-- Forbids aliasing an imported class name with the original name -->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>

    <!-- Requires a single blank line before the first and after the last use statement, forbids blank lines between use blocks -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing"/>

    <!-- Disallows use of ++ and its opposite, forcing += and -= for clarity instead -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators"/>

    <!-- Require combined assignment operators (+=, .=, etc.) -->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>

    <!-- Disallow using the splat operator for functions that have optimized opcodes -->
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>

    <!-- Force short list syntax: [...] instead of list(...) -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>

    <!-- Force use of short names in type casts (int vs. integer, bool vs. boolean) -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>

    <!-- Require presence of declare(strict_types = 1) -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property
                    name="newlinesCountBetweenOpenTagAndDeclare"
                    value="2"
            />
            <property
                    name="spacesCountAroundEqualsSign"
                    value="0"
            />
            <property
                    name="newlinesCountAfterDeclare"
                    value="2"
            />
        </properties>
    </rule>

    <!-- Disallow useless parentheses -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>

    <!-- Disallow useless semicolons -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>

    <!-- Require use of short versions of scalar types (i.e. int instead of integer) -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>

    <!-- Require ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

    <!-- Require null to be passed as last possible type in type declarations -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>

    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>

    <!-- Require space after colon for return types, no space before -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0"/>
        </properties>
    </rule>

    <!-- Require types to be written as natively if possible;
         forbid useless/duplicated information in phpDoc
         Don't require parameter/return type hints as they might require @inheritdoc
         Avoid requiring specific traversable typehints, they often end up as mixed[]
         Don't forbid "useless" doc comments as it doesn't handle multi-line annotations correctly -->
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingParameterTypeHint"/>
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableParameterTypeHintSpecification" />
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversablePropertyTypeHintSpecification" />
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableReturnTypeHintSpecification" />
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.UselessDocComment"/>

        <properties>
            <property name="enableEachParameterAndReturnInspection" value="true"/>
            <property
                    name="usefulAnnotations"
                    type="array"
                    value="
                    @after,
                    @afterClass,
                    @AfterMethods,
                    @Attribute,
                    @Attributes,
                    @before,
                    @beforeClass,
                    @BeforeMethods,
                    @covers,
                    @coversDefaultClass,
                    @coversNothing,
                    @dataProvider,
                    @depends,
                    @deprecated,
                    @Enum,
                    @expectedDeprecation,
                    @expectedException,
                    @expectedExceptionCode,
                    @expectedExceptionMessage,
                    @expectedExceptionMessageRegExp,
                    @Get,
                    @group,
                    @Groups,
                    @IgnoreAnnotation,
                    @internal,
                    @Iterations,
                    @link,
                    @ODM\,
                    @ORM\,
                    @Post,
                    @QueryParam,
                    @Required,
                    @Revs,
                    @runInSeparateProcess,
                    @runTestsInSeparateProcesses,
                    @see,
                    @Target,
                    @throws,
                    @View
                "
            />
        </properties>
    </rule>

    <!-- Forbid typehints for constants -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>

    <!-- Forbid empty lines around type declarations -->
    <!--<rule ref="SlevomatCodingStandard.Types.EmptyLinesAroundTypeBraces">-->
        <!--<properties>-->
            <!--<property name="linesCountAfterOpeningBrace" value="0"/>-->
            <!--<property name="linesCountBeforeClosingBrace" value="0"/>-->
        <!--</properties>-->
    <!--</rule>-->

    <!-- Forbid duplicate assignments to variables -->
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>

    <!-- Forbid unused variables -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>

    <!-- Forbid variables that are only used once -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>

    <!-- Forbid spaces around square brackets -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

    <!-- Force array declaration structure -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <!-- Disable arrow alignment -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
        <!-- Uses indentation of only single space -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
        <!-- Allow multiple values on a single line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <!-- Disable alignment of braces -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
        <!-- Disable alignment of values with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
        <!-- Checked by SlevomatCodingStandard.Arrays.TrailingArrayComma.MissingTrailingComma -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/>
        <!-- Allow multi-line arrays with one element -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/>
    </rule>

    <!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName"/>

    <!-- Force `self::` for self-reference, force lower-case self, forbid spaces around `::` -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>

    <!-- Force rules for function phpDoc (Squiz.Commenting.FunctionComment) currently disabled -->

    <!-- Forbid global functions -->
    <rule ref="Squiz.Functions.GlobalFunction"/>

    <!-- Forbid `AND` and `OR`, require `&&` and `||` -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>

    <!-- Forbid `global` -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>

    <!-- Forbid functions inside functions -->
    <rule ref="Squiz.PHP.InnerFunctions"/>

    <!-- Require PHP function calls in lowercase -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>

    <!-- Forbid dead code -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- Forbid `$this` inside static function -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!-- Force whitespace before and after concatenation -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Forbid strings in `"` unless necessary -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage">
        <exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/>
    </rule>

    <!-- Forbid braces around string in `echo` -->
    <rule ref="Squiz.Strings.EchoedStrings"/>

    <!-- Forbid spaces in type casts -->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <!-- Forbid blank line after function opening brace -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- Require space after language constructs -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Require space around logical operators -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <!-- Require whitespace between class member vars -->
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <properties>
            <property name="spacingBeforeFirst" value="0"/>
        </properties>
    </rule>

    <!-- Forbid spaces around `->` operator -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Forbid superfluous whitespaces -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- turned on by PSR2 -> turning back off -->
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <!-- turned off by PSR2 -> turning back on -->
    </rule>
</ruleset>
